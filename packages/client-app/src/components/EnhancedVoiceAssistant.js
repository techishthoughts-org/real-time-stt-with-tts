import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useCallback } from 'react';
import { Box, Card, CardContent, Typography, Chip, Alert, Tabs, Tab, } from '@mui/material';
import { VoiceAssistant } from './VoiceAssistant';
import { VoiceRecorder } from './VoiceRecorder';
import { useWebSocketChat } from '../hooks/useWebSocketChat';
export const EnhancedVoiceAssistant = ({ userId = 'anonymous', onSettingsChange, }) => {
    const [activeTab, setActiveTab] = useState(0);
    const [transcription, setTranscription] = useState('');
    const [isRealTimeMode, setIsRealTimeMode] = useState(true);
    const { isConnected, isListening, connectionId, error: wsError, } = useWebSocketChat();
    const handleTranscription = useCallback((text, isFinal) => {
        if (isFinal) {
            setTranscription(prev => prev + (prev ? ' ' : '') + text);
        }
        else {
            // Show interim transcription
            console.log('Interim transcription:', text);
        }
    }, []);
    const handleAudioData = useCallback((audioData) => {
        // Handle audio data if needed
        console.log('Audio data received:', audioData);
    }, []);
    const handleTabChange = useCallback((event, newValue) => {
        setActiveTab(newValue);
    }, []);
    return (_jsxs(Box, { sx: { maxWidth: 1200, mx: 'auto', p: 2 }, children: [_jsxs(Box, { sx: { mb: 3, textAlign: 'center' }, children: [_jsx(Typography, { variant: "h3", component: "h1", gutterBottom: true, children: "\uD83C\uDFAD Gon Voice Assistant" }), _jsx(Typography, { variant: "body1", color: "text.secondary", gutterBottom: true, children: "Advanced AI-powered voice assistant with real-time communication" }), _jsxs(Box, { sx: { display: 'flex', gap: 1, justifyContent: 'center', flexWrap: 'wrap', mt: 2 }, children: [_jsx(Chip, { label: isConnected ? 'WebSocket Connected' : 'WebSocket Disconnected', color: isConnected ? 'success' : 'error', variant: "outlined" }), connectionId && (_jsx(Chip, { label: `ID: ${connectionId.slice(-8)}`, variant: "outlined", size: "small" })), isListening && (_jsx(Chip, { label: "Listening", color: "primary", variant: "outlined" }))] })] }), wsError && (_jsxs(Alert, { severity: "error", sx: { mb: 2 }, children: ["WebSocket Error: ", wsError] })), _jsx(Card, { sx: { mb: 3 }, children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Communication Mode" }), _jsxs(Tabs, { value: activeTab, onChange: handleTabChange, centered: true, children: [_jsx(Tab, { label: "Real-time Voice" }), _jsx(Tab, { label: "Traditional Chat" }), _jsx(Tab, { label: "Voice Recorder" })] })] }) }), activeTab === 0 && (_jsx(Card, { children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Real-time Voice Communication" }), _jsx(Typography, { variant: "body2", color: "text.secondary", sx: { mb: 2 }, children: "Use the voice recorder below for real-time voice communication with Gon via WebSocket." }), _jsx(VoiceRecorder, { onTranscription: handleTranscription, onAudioData: handleAudioData, language: "pt-BR", sampleRate: 16000 }), transcription && (_jsxs(Box, { sx: { mt: 3 }, children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Transcription:" }), _jsx(Card, { variant: "outlined", sx: { p: 2, bgcolor: 'grey.50' }, children: _jsx(Typography, { variant: "body1", children: transcription }) })] }))] }) })), activeTab === 1 && (_jsx(Card, { children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Traditional Chat Interface" }), _jsx(Typography, { variant: "body2", color: "text.secondary", sx: { mb: 2 }, children: "Use the traditional chat interface with Web Speech API." }), _jsx(VoiceAssistant, { userId: userId, onSettingsChange: onSettingsChange })] }) })), activeTab === 2 && (_jsx(Card, { children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Advanced Voice Recorder" }), _jsx(Typography, { variant: "body2", color: "text.secondary", sx: { mb: 2 }, children: "Advanced voice recording with audio visualization and playback." }), _jsx(VoiceRecorder, { onTranscription: handleTranscription, onAudioData: handleAudioData, language: "pt-BR", sampleRate: 44100, channels: 2 })] }) })), _jsx(Card, { sx: { mt: 3 }, children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Features" }), _jsxs(Box, { sx: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 2 }, children: [_jsxs(Box, { children: [_jsx(Typography, { variant: "subtitle1", fontWeight: "bold", children: "\uD83C\uDFA4 Real-time Voice" }), _jsx(Typography, { variant: "body2", color: "text.secondary", children: "Live voice communication with instant transcription and AI responses" })] }), _jsxs(Box, { children: [_jsx(Typography, { variant: "subtitle1", fontWeight: "bold", children: "\uD83D\uDD04 WebSocket Streaming" }), _jsx(Typography, { variant: "body2", color: "text.secondary", children: "Low-latency bidirectional communication for seamless interaction" })] }), _jsxs(Box, { children: [_jsx(Typography, { variant: "subtitle1", fontWeight: "bold", children: "\uD83C\uDFB5 Audio Processing" }), _jsx(Typography, { variant: "body2", color: "text.secondary", children: "Advanced audio capture with noise suppression and echo cancellation" })] }), _jsxs(Box, { children: [_jsx(Typography, { variant: "subtitle1", fontWeight: "bold", children: "\uD83E\uDD16 AI Integration" }), _jsx(Typography, { variant: "body2", color: "text.secondary", children: "Powered by multiple AI models with context-aware responses" })] })] })] }) }), _jsx(Card, { sx: { mt: 3 }, children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Technical Information" }), _jsxs(Box, { sx: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 2 }, children: [_jsxs(Box, { children: [_jsx(Typography, { variant: "body2", color: "text.secondary", children: "WebSocket Status" }), _jsx(Typography, { variant: "body1", fontWeight: "bold", children: isConnected ? 'Connected' : 'Disconnected' })] }), _jsxs(Box, { children: [_jsx(Typography, { variant: "body2", color: "text.secondary", children: "Connection ID" }), _jsx(Typography, { variant: "body1", fontWeight: "bold", fontFamily: "monospace", children: connectionId ? connectionId.slice(-12) : 'N/A' })] }), _jsxs(Box, { children: [_jsx(Typography, { variant: "body2", color: "text.secondary", children: "Listening State" }), _jsx(Typography, { variant: "body1", fontWeight: "bold", children: isListening ? 'Active' : 'Inactive' })] }), _jsxs(Box, { children: [_jsx(Typography, { variant: "body2", color: "text.secondary", children: "Mode" }), _jsx(Typography, { variant: "body1", fontWeight: "bold", children: isRealTimeMode ? 'Real-time' : 'Traditional' })] })] })] }) })] }));
};
